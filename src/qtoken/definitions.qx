// a modulok kozos definicioi

body {
    // A szovegben a feldolgozas soran hasznalt tag-ek C++-os (wstring)
    // definicioja.
    // Az xml tag-ek cserélhetők spec. karakterekre a későbbi feldolgozást
    // megkönnyítendő. Ekkor a define szekcio _QX vegzodesu definicioit is
    // cserelni kell.
    const std::wstring SNT_OPEN_CPP     = L"<s>";
    const std::wstring SNT_CLOSE_CPP    = L"</s>";
    const std::wstring WS_OPEN_CPP      = L"<w>";
    const std::wstring WS_CLOSE_CPP     = L"</w>";

    //
    const std::wstring REPLACEMENTCHAR_CPP = L"�";

    // mondathatar-tag-ek ("</s> <s>"-szeru dolgok) torlese kapott stringbol,
    // javitott szoveg visszaadasa
    // TODO: C++-ositani!
    // Megj.: Az sntcorr.qx-ben lenne a helye, de ha abban van 'body' szekcio,
    //      akkor az felulirja az ittenit, igy az sntcorr.qx-ben nem lenne
    //      hasznalhato a tobbi, itt deklaralt dolog sem. Szoval itt van, a
    //      tobbi modul meg nem hasznalja es kesz.
    std::wstring snt_boundary_correction(const wchar_t* lexi) {
        std::wstring buff;
        // buff.reserve(8192);
        for (size_t i=0; i<wcslen(lexi); ++i) {
            if (wcsncmp(lexi+i, SNT_OPEN_CPP.c_str(), SNT_OPEN_CPP.length()) == 0) {
                i += SNT_OPEN_CPP.length()-1;
            }
            else if (wcsncmp(lexi+i, SNT_CLOSE_CPP.c_str(), SNT_CLOSE_CPP.length()) == 0) {
                i += SNT_CLOSE_CPP.length()-1;
            }
            else {
                buff += lexi[i];
            }
        }
        return buff;
    }
}


define {
    // Karakterrosztályok: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // EMOTICONS: ~. A quex nem ismeri ezt a unicode blokkot, kézzel kell
    //      megadni
    // BASE_CLASS: alap karakterosztály, minden más ennek részhalmaza kell
    //      legyen
    // NEWLINE: újsor karakterek
    // SPACE: minden wspace a base_class-ból, az újsor karakterek kivételével
    //      Ez a régi: ([ \n\t]) - nincs különbség a ws és nl között.
    // WSPACE: minden white space a base class-bol
    // WORDCHAR: szóban szerepelhető karakterek (pont is benne van, l. nytud.hu)
    //      eredetileg html entitásokat is tartalmazott, de ki lettek véve
    //      Ez a régi: ([a-zA-ZáéíóöőúüűÁÉÍÓÖŐÚÜŰ\-.§%°0-9¡£¥¦©ª«¬®¯±³µ¶¹º»¼¾¿ĄŁĽŚŠŞŤŹŽŻąłľśšşťźžżŔÂĂÄĹĆÇČĘËĚÎĎĐŃŇÔŘŮÝŢßŕâăäĺćçčęëěîďđńňôřůýţ])
    //      TODO: html entitások kezelését kitalálni (előfeldolgozás, és
    //          utf8-ra alakítás?)
    //      Figyelni: az eredeti a '_'-t nem tartalmazza (hun_token-nel lehet
    //          fontos)!
    // WORDCHAR2: szóban szerepelhető karakterek, pont nélkül
    // NONWORDCHAR: nem-szoalkoto kakaktrerek (pont nincs benne, tehat a sima
    //      WORDCHAR komplementere)
    //      Ez a regi: [^a-zA-ZáéíóöõúüûÁÉÍÓÖÕÚÜÛ\-.§%°0-9¡£¥¦©ª«¬®¯±³µ¶¹º»¼¾¿ÀÂÃÄÅÆÇÈÊËÌÎÏÐÑÒÔØÙÝÞßàâãäåæçèêëìîïðñòôøùýþ]
    //      Figyelni: a hun_token is hasznalja, de az a '_'-t is tartalmazza!
    // LOWER: kisbetűk + néhány szimbólum Csaba kódja alapján
    //      Ez a régi: ([a-zµ¿»¶±¼¾¹³áàăâåäãąæćčçďđðéèêěëęíìîïĺľłńňñóòôöőõøºŕřśšşßťţúùûůüűýźžżþ])
    //      Megj.: union(\P{Lowercase}, \P{Other_Lowercase} is lehet hogy jó
    //          \G{Lowercase_Letter} helyett -- vajon van különbség?
    // UPPER: nagybetűk + néhány szimbólum Csaba kódja alapján
    //      Ez a régi: ([A-ZÁÉÍÓÖÕÚÜÛ§¡£¥¦©ª«¬®¯ÀÂÃÄÅÆÇÈÊËÌÎÏÐÑÒÔØÙÝÞ])
    // CHARINSNT: mondatban szerepelhető, nem szóalkotó és nem is mondathatároló
    //      karakterek (zárójel, idézőjel, szóköz, stb.)
    // BOUNDARY: egyszerű mondathatároló karakterek (pont, felkiáltójel,
    //      kérdőjel)
    //      Megj.: a szón belüli pont máshogy van kezelve.
    // SNTCHAR: nem mondathatároló karakter ami nem is sortörés
    // SNTBEGINCHR: mondatkezdő karakter (pont is lehet, pl. a ".hu vita a
    //           neten.")
    // ENDQUOPAR: záró záró- és idézőjelek
    //      Ez a régi: ("\""|"''"|"'"|")"|"]")
    //      Megj.: mondathatár (BOUNDARY) után is következhetnek (l. SNTEND)
    //      TODO: unicode-osítani
    // INPARENTCHR: BRACKET_PART szabályban zárójelen belül alapból megengedett
    //      karakterek osztálya
    // COMMACHR: COMMA_PART szabályban szerepelhető vessző-szerű karakterek
    
    EMOTICONS   [\U1F600-\U1F915]

    BASE_CLASS  [: union( \P{Block=Basic_Latin},
                          \P{Block=Latin-1_Supplement},
                          \P{Block=Latin_Extended-A},
                          \P{Block=Latin_Extended-B},
                          \P{Block=Latin_Extended-C},
                          \P{Block=Latin_Extended-D},
                          \P{Block=Cyrillic},
                          \P{Block=Cyrillic_Supplement},
                          \P{Block=Greek_and_Coptic},
                          \P{Block=Greek_Extended},
                          \P{Block=Ancient_Greek_Numbers},
                          \P{Block=Combining_Diacritical_Marks},
                          \P{Block=Combining_Diacritical_Marks_Supplement},
                          \P{Block=General_Punctuation},
                          \P{Block=Supplemental_Punctuation},
                          \P{Block=Specials},
                          \P{Block=Mathematical_Operators},
                          \P{Block=Supplemental_Mathematical_Operators},
                          \P{Block=Geometric_Shapes},
                          \P{Block=Arrows},
                          \P{Block=Supplemental_Arrows-A},
                          \P{Block=Supplemental_Arrows-B},
                          \P{Block=Private_Use_Area},
                          \P{Block=Supplementary_Private_Use_Area-A},
                          \P{Block=Supplementary_Private_Use_Area-B},
                          \P{Block=Spacing_Modifier_Letters},
                          \P{Block=Alphabetic_Presentation_Forms},
                          \P{Block=Phonetic_Extensions},
                          \P{Block=Phonetic_Extensions_Supplement},
                          \P{Block=Currency_Symbols},
                          \P{Block=Letterlike_Symbols},
                          \P{Block=Mathematical_Alphanumeric_Symbols},
                          \P{Block=Miscellaneous_Mathematical_Symbols-A},
                          \P{Block=Miscellaneous_Mathematical_Symbols-B},
                          \P{Block=Miscellaneous_Symbols_and_Arrows},
                          \P{Block=Miscellaneous_Technical},
                          \P{Block=Musical_Symbols},
                          \P{Block=Miscellaneous_Symbols},
                          {EMOTICONS}) :]

    NEWLINE     [: intersection( {BASE_CLASS}, [\n\r\f\v] ) :]

    SPACE       [: intersection( {BASE_CLASS}, difference( \P{White_Space}, {NEWLINE}) ) :]

    WSPACE      ({NEWLINE}|{SPACE})

    WORDCHAR    [: intersection( {BASE_CLASS}, union(\P{Alphabetic}, \G{Number}, [.\-_§%°¡£¥¦©ª«¬®¯±µ¶»¿/])) :]
 
    WORDCHAR2   [: intersection( {BASE_CLASS}, union(\P{Alphabetic}, \G{Number}, [\-_§%°¡£¥¦©ª«¬®¯±µ¶»¿/])) :]

    NONWORDCHAR [: difference( {BASE_CLASS}, {WORDCHAR}) :]

    LOWER       [: intersection( {BASE_CLASS}, union(\G{Lowercase_Letter}, [¿»¶±¼¾¹³øº])) :]

    UPPER       [: intersection( {BASE_CLASS}, union(\G{Uppercase_Letter}, [§¡£¥¦©ª«¬®¯]) ) :]

    CHARINSNT   [: intersection( {BASE_CLASS}, [\(\)\-[\],; "] ) :]

    BOUNDARY    [: intersection( {BASE_CLASS}, [.?!] ) :]

    SNTCHAR     [: intersection( {BASE_CLASS}, [^.?!\n] ) :]

    SNTBEGINCHR [: intersection( {BASE_CLASS}, [^?!\n ] ) :]

    ENDQUOPAR   [: intersection( {BASE_CLASS}, ["'\)\]] ) :]

    INPARENTCHR [: intersection( {BASE_CLASS}, difference([^.!?\)], {NEWLINE}) ) :]

    COMMACHR    [: intersection( {BASE_CLASS}, [,;:] ) :]


    // A szovegben a feldolgozas soran hasznalt tag-ek quex-es (pattern)
    // definicioja:
    SNT_OPEN_QX    "<s>"
    SNT_CLOSE_QX   "</s>"
    WS_OPEN_QX     "<w>"
    WS_CLOSE_QX    "</w>"

    // egyebek:
    /* REPLACEMENTCHAR_QX "�" */

}


// vim:set syntax=cpp:

