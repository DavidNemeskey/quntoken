token {
    // alap karakterosztalyba tartozo karakterek nem ures sorozata
    BASECHARS;
    // egy db ismeretlen karakter helyettesitoje
    REPLACEMENTCHAR;
}

mode PREPROC {
    // Az alap karakterosztalyba tartozo karaktereket atengedjuk.
    [: difference( union({BASE_CLASS}, {SPACE}), {NEWLINECHAR}) :]+ => QUEX_TKN_BASECHARS(Lexeme);
    {NEWLINECHAR}+      => QUEX_TKN_BASECHARS(Lexeme);

    // A nem abba tartozokat lecsereljuk es hibauzenetet adunk.
    .               {
        std::cerr << "invalid character ("
                  << self.line_number() << ","
                  << self.column_number() << "): "
                  << QUEX_CONVERTER_STRING(unicode, char)(Lexeme) << std::endl;
        self_send1(QUEX_TKN_REPLACEMENTCHAR, self.REPLACEMENTCHAR_CPP.c_str());
    }
    on_failure      => QUEX_TKN_TERMINATION;
    <<EOF>>         => QUEX_TKN_TERMINATION;
    on_end_of_stream => QUEX_TKN_TERMINATION;
}

// vim:set syntax=cpp:

