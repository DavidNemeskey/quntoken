#include <iostream>
#include <string>
#include <sstream>
#include <gtest/gtest.h>
#include "printer.h"
#include "using_module.h"
#include "prep_prep_lexer" // a *_lexer-eknek elobb kell lenniuk, mint a tobbi quex-esnek
#include "snt_snt_lexer"
#include "sntcorr_sntcorr_lexer"
#include <quex/code_base/multi.i> // a t√∂bb quex modulhoz
#include <quex/code_base/definitions> // QUEX_CONVERTER_STRING-hez


std::string process_text(std::string text) {
    std::stringstream input(text);
    std::stringstream to_snt; // output of prepocessing, input of snt processing
    using_module<std::stringstream*, std::stringstream, prep::prep_lexer, prep::Token>(&input, to_snt, PREP_TERMINATION);
    std::stringstream to_sntcorr1; // output of snt modul, input of sntcorr modul
    using_module<std::stringstream*, std::stringstream, snt::snt_lexer, snt::Token>(&to_snt, to_sntcorr1, SNT_TERMINATION);
    std::stringstream to_sntcorr2; // output of sntcorr1, input of sntcorr2
    using_module<std::stringstream*, std::stringstream, sntcorr::sntcorr_lexer, sntcorr::Token>(&to_sntcorr1, to_sntcorr2, SNTCORR_TERMINATION);
    std::stringstream to_token; // output of sntcorr modul, input of token modul
    using_module<std::stringstream*, std::stringstream, sntcorr::sntcorr_lexer, sntcorr::Token>(&to_sntcorr2, to_token, SNTCORR_TERMINATION);

    Printer xml_printer(XML);
    std::string res = to_token.str();
    return xml_printer.convert_tags(res);
}

TEST(process_text, PositiveNos) {
    ${ASSERTIONS}
}


int main(int argc, char **argv) {
    testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}

// vim:set syntax=cpp:

